var documenterSearchIndex = {"docs":
[{"location":"api.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"CurrentModule = OptimalControl","category":"page"},{"location":"api.html","page":"API","title":"API","text":"Modules = [OptimalControl]\nOrder = [:module, :type, :function, :macro]","category":"page"},{"location":"api.html#OptimalControl.OptimalControl","page":"API","title":"OptimalControl.OptimalControl","text":"OptimalControl module.\n\nLists all the imported modules and packages:\n\nBase\nCTBase\nCTDirect\nCTFlows\nCore\nDocStringExtensions\n\nList of all the exported names:\n\n*\nAutonomous\nControlConstraint\nControlLaw\nFeedbackControl\nFixed\nFlow\nHamiltonian\nHamiltonianLift\nHamiltonianVectorField\nIndex\n@Lie\nLie\nLift\nMixedConstraint\nModel\nMultiplier\nNonAutonomous\nNonFixed\n@Poisson\nPoisson\nStateConstraint\nVectorField\nconstraint\nconstraint!\ncontrol!\nctrepl\n@def\ndynamics!\nis_max\nis_min\nis_time_dependent\nis_time_independent\nis_variable_dependent\nis_variable_independent\nobjective!\nplot\nplot!\nremove_constraint!\nsolve\nstate!\ntime!\nvariable!\n∂ₜ\n⋅\n\n\n\n\n\n","category":"module"},{"location":"api.html#OptimalControl.solve-Tuple{CTBase.OptimalControlModel, Vararg{Symbol}}","page":"API","title":"OptimalControl.solve","text":"solve(\n    ocp::CTBase.OptimalControlModel,\n    description::Symbol...;\n    display,\n    init,\n    kwargs...\n) -> Union{Nothing, CTBase.OptimalControlSolution}\n\n\nSolve the the optimal control problem ocp. \n\n\n\n\n\n","category":"method"},{"location":"dev-api.html#Internal-functions","page":"Developpers","title":"Internal functions","text":"","category":"section"},{"location":"dev-api.html","page":"Developpers","title":"Developpers","text":"CurrentModule = OptimalControl ","category":"page"},{"location":"dev-api.html","page":"Developpers","title":"Developpers","text":"Modules = [OptimalControl]\nOrder = [:module, :type, :function, :macro]\nPublic = false","category":"page"},{"location":"goddard.html#Advanced-example","page":"Advanced example","title":"Advanced example","text":"","category":"section"},{"location":"goddard.html","page":"Advanced example","title":"Advanced example","text":"This well-known problem[1] [2] models the ascent of a rocket through the atmosphere, and we restrict here ourselves to vertical (one dimensional) trajectories. The state variables are the altitude r, speed v and mass m of the rocket during the flight, for a total dimension of 3. The rocket is subject to gravity g, thrust u and drag force D (function of speed and altitude). The final time T is free, and the objective is to reach a maximal altitude with a bounded fuel consumption.","category":"page"},{"location":"goddard.html","page":"Advanced example","title":"Advanced example","text":"We thus want to solve the optimal control problem in Mayer form","category":"page"},{"location":"goddard.html","page":"Advanced example","title":"Advanced example","text":"    max r(T)","category":"page"},{"location":"goddard.html","page":"Advanced example","title":"Advanced example","text":"subject to the control dynamics","category":"page"},{"location":"goddard.html","page":"Advanced example","title":"Advanced example","text":"    dotr = v quad\n    dotv = fracT_maxu - D(rv)m - g quad\n    dotm = -u","category":"page"},{"location":"goddard.html","page":"Advanced example","title":"Advanced example","text":"and subject to the control constraint u(t) in 01 and the state constraint v(t) leq v_max. The initial state is fixed while only the final mass is prescribed.","category":"page"},{"location":"goddard.html","page":"Advanced example","title":"Advanced example","text":"note: Note\nThe Hamiltonian is affine with respect to the control, so singular arcs may occur,  as well as constrained arcs due to the path constraint on the velocity (see below).","category":"page"},{"location":"goddard.html","page":"Advanced example","title":"Advanced example","text":"We import the OptimalControl.jl package:","category":"page"},{"location":"goddard.html","page":"Advanced example","title":"Advanced example","text":"using OptimalControl","category":"page"},{"location":"goddard.html","page":"Advanced example","title":"Advanced example","text":"We define the problem","category":"page"},{"location":"goddard.html","page":"Advanced example","title":"Advanced example","text":"# Parameters\nconst Cd = 310\nconst Tmax = 3.5\nconst β = 500\nconst b = 2\n\nt0 = 0\nr0 = 1\nv0 = 0\nvmax = 0.1\nm0 = 1\nmf = 0.6\n\n# Initial state\nx0 = [ r0, v0, m0 ]\n\n# Abstract model\n@def ocp_goddard begin\n\n    tf, variable\n    t ∈ [ t0, tf ], time\n    x ∈ R³, state\n    u ∈ R, control\n    \n    r = x₁\n    v = x₂\n    m = x₃\n   \n    x(t0) == [ r0, v0, m0 ]\n    0  ≤ u(t) ≤ 1\n         r(t) ≥ r0,     (1)\n    0  ≤ v(t) ≤ vmax,   (2)\n    mf ≤ m(t) ≤ m0,     (3)\n\n    ẋ(t) == F0(x(t)) + u(t) * F1(x(t))\n \n    r(tf) → max\n    \nend;\n\nF0(x) = begin\n    r, v, m = x\n    D = Cd * v^2 * exp(-β*(r - 1))\n    return [ v, -D/m - 1/r^2, 0 ]\nend\n\nF1(x) = begin\n    r, v, m = x\n    return [ 0, Tmax/m, -b*Tmax ]\nend\nnothing # hide","category":"page"},{"location":"goddard.html","page":"Advanced example","title":"Advanced example","text":"Solve it","category":"page"},{"location":"goddard.html","page":"Advanced example","title":"Advanced example","text":"N = 50\ndirect_sol_goddard = solve(ocp_goddard, grid_size=N)\nnothing # hide","category":"page"},{"location":"goddard.html","page":"Advanced example","title":"Advanced example","text":"and plot the solution","category":"page"},{"location":"goddard.html","page":"Advanced example","title":"Advanced example","text":"plot(direct_sol_goddard, size=(700, 700))","category":"page"},{"location":"goddard.html","page":"Advanced example","title":"Advanced example","text":"[1]: R.H. Goddard. A Method of Reaching Extreme Altitudes, volume 71(2) of Smithsonian Miscellaneous Collections. Smithsonian institution, City of Washington, 1919.","category":"page"},{"location":"goddard.html","page":"Advanced example","title":"Advanced example","text":"[2]: H. Seywald and E.M. Cliff. Goddard problem in presence of a dynamic pressure limit. Journal of Guidance, Control, and Dynamics, 16(4):776–781, 1993.","category":"page"},{"location":"index.html#OptimalControl.jl","page":"Introduction","title":"OptimalControl.jl","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"CurrentModule =  OptimalControl","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"The OptimalControl.jl package is part of the control-toolbox ecosystem.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"note: Install\nTo install a package from the control-toolbox ecosystem,  please visit the installation page.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"This package aims to provide tools to solve optimal control problems by direct and indirect methods. An optimal control problem can be described as minimising the cost functional","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"g(t_0 x(t_0) t_f x(t_f)) + int_t_0^t_f f^0(t x(t) u(t))mathrmdt","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"where the state x and the control u are functions subject, for t in t_0 t_f, to the differential constraint","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"   dotx(t) = f(t x(t) u(t))","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"and other constraints such as","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"beginarrayllcll\nxi_l  le xi(t u(t))        le xi_u \neta_l le eta(t x(t))       le eta_u \npsi_l le psi(t x(t) u(t)) le psi_u \nphi_l le phi(t_0 x(t_0) t_f x(t_f)) le phi_u\nendarray","category":"page"},{"location":"basic-example.html#Basic-example","page":"Basic example","title":"Basic example","text":"","category":"section"},{"location":"basic-example.html","page":"Basic example","title":"Basic example","text":"Consider we want to minimise the cost functional","category":"page"},{"location":"basic-example.html","page":"Basic example","title":"Basic example","text":"    frac12int_0^1 u^2(t)  mathrmdt","category":"page"},{"location":"basic-example.html","page":"Basic example","title":"Basic example","text":"subject to the dynamical constraints for t in 0 1","category":"page"},{"location":"basic-example.html","page":"Basic example","title":"Basic example","text":"    dot x_1(t) = x_2(t) quad dot x_2(t) = u(t) in mathbbR","category":"page"},{"location":"basic-example.html","page":"Basic example","title":"Basic example","text":"and the limit conditions","category":"page"},{"location":"basic-example.html","page":"Basic example","title":"Basic example","text":"    x(0) = (-1 0) quad x(1) = (0 0)","category":"page"},{"location":"basic-example.html","page":"Basic example","title":"Basic example","text":"First, we need to import the OptimalControl.jl package:","category":"page"},{"location":"basic-example.html","page":"Basic example","title":"Basic example","text":"using OptimalControl","category":"page"},{"location":"basic-example.html","page":"Basic example","title":"Basic example","text":"Then, we can define the problem","category":"page"},{"location":"basic-example.html","page":"Basic example","title":"Basic example","text":"t0 = 0\ntf = 1\nA = [ 0 1\n      0 0 ]\nB = [ 0\n      1 ]\n\n@def ocp_di begin\n    t ∈ [ t0, tf ], time                         # time interval\n    x ∈ R², state                                # state\n    u ∈ R, control                               # control\n    x(t0) == [-1, 0],    (initial_con)           # initial condition\n    x(tf) == [0, 0],    (final_con)              # final condition\n    ẋ(t) == A * x(t) + B * u(t)                  # dynamics\n    ∫( 0.5u(t)^2 ) → min                         # objective\nend\nnothing # hide","category":"page"},{"location":"basic-example.html","page":"Basic example","title":"Basic example","text":"Solve it","category":"page"},{"location":"basic-example.html","page":"Basic example","title":"Basic example","text":"sol_di = solve(ocp_di)\nnothing # hide","category":"page"},{"location":"basic-example.html","page":"Basic example","title":"Basic example","text":"and plot the solution","category":"page"},{"location":"basic-example.html","page":"Basic example","title":"Basic example","text":"plot(sol_di, size=(700, 700))","category":"page"}]
}
